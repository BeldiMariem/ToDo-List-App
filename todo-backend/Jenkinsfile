pipeline {
   
    agent any
    tools {
      jdk 'JDK21'
      maven 'Maven3'
    }

    environment {
        DOCKER_IMAGE = "mariem19/todo_backend"
        APP_DIR = "todo-backend"
        AWS_ECR_IMAGE = "${env.AWS_ACCOUNT_ID}.dkr.ecr.us-east-1.amazonaws.com/todo-backend"
        CLUSTER_NAME = "todo-cluster"
        SERVICE_NAME = "backend-service"
    }

    options {
        timestamps()
        buildDiscarder(logRotator(daysToKeepStr: '30', numToKeepStr: '10'))
    }

    triggers {
        githubPush() 
    }

    stages {
        stage('Checkout') {
            steps {
                checkout scm
            }
        }

        stage('Build') {
            steps {
                dir("${APP_DIR}") {
                    sh 'mvn clean package -DskipTests'
                }
            }
        }

        stage('Unit Tests') {
            steps {
                dir("${APP_DIR}") {
                    sh 'mvn test -Dspring.profiles.active=test'
                }
            }
            post {
                always {
                    junit "${APP_DIR}/target/surefire-reports/*.xml"
                }
            }
        }


        stage('Deploy to Nexus') {
            when {
                branch 'main'
            }
            steps {
                dir("${APP_DIR}") {
                    withMaven(mavenSettingsConfig: 'maven-settings') {
                        sh 'mvn deploy -DskipTests'
                    }
                }
            }
        }

        stage('Docker Build & Push to DockerHub') {
            when {
                branch 'main'
            }
            steps {
                withCredentials([usernamePassword(credentialsId: 'dockerhub-credentials', usernameVariable: 'DOCKER_USER', passwordVariable: 'DOCKER_PASS')]) {
                    sh """
                        echo \$DOCKER_PASS | docker login -u \$DOCKER_USER --password-stdin
                        docker build -t ${DOCKER_IMAGE}:latest ./${APP_DIR}
                        docker push ${DOCKER_IMAGE}:latest
                    """
                }
            }
        }
        stage('Build & Push to AWS ECR') {
            when {
                branch 'main'
            }
            steps {
                withAWS(credentials: 'aws-credentials', region: 'us-east-1') {
                    sh """
                        # Login to ECR
                        aws ecr get-login-password --region us-east-1 | docker login --username AWS --password-stdin ${env.AWS_ACCOUNT_ID}.dkr.ecr.us-east-1.amazonaws.com
                        
                        # Build and tag for ECR
                        docker build -t ${AWS_ECR_IMAGE}:latest ./${APP_DIR}
                        docker push ${AWS_ECR_IMAGE}:latest
                    """
                }
            }
        }

        stage('Deploy to ECS') {
            when {
                branch 'main'
            }
            steps {
                withAWS(credentials: 'aws-credentials', region: 'us-east-1') {
                    sh """
                        # Force new deployment
                        aws ecs update-service \
                            --cluster ${CLUSTER_NAME} \
                            --service ${SERVICE_NAME} \
                            --force-new-deployment
                        
                        # Wait for deployment to stabilize
                        echo "Waiting for deployment to complete..."
                        aws ecs wait services-stable \
                            --cluster ${CLUSTER_NAME} \
                            --services ${SERVICE_NAME}
                        
                        # Check deployment status
                        echo "Deployment status:"
                        aws ecs describe-services \
                            --cluster ${CLUSTER_NAME} \
                            --services ${SERVICE_NAME} \
                            --query 'services[0].{running:runningCount, desired:desiredCount}'
                    """
                }
            }
        }
    }

    post {
        always {
            echo 'Pipeline finished.'
        }
        success {
            echo '‚úÖ Backend build & deployment successful!'
            echo 'üîó Backend API: http://todo-backend-alb-v2-1839963082.us-east-1.elb.amazonaws.com'

        }
        failure {
            echo '‚ùå Something went wrong with the backend pipeline.'
        }
    }
}
